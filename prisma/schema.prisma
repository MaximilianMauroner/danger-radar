// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String     @id @default(cuid())
  name               String?
  email              String?    @unique
  emailVerified      DateTime?
  image              String?
  emergencyMode      Boolean    @default(false)
  accounts           Account[]
  sessions           Session[]
  Marker             Marker[]
  userFriendsRecords Friend[]   @relation("self")
  friends            Friend[]   @relation("friend")
  position           Position[]
  Feedback           Feedback[]
}

model Friend {
  selfId               String
  friendId             String
  self                 User    @relation("self", fields: [selfId], references: [id])
  friend               User    @relation("friend", fields: [friendId], references: [id])
  allowLocationSharing Boolean @default(false)
  isEmergencyContact   Boolean @default(false)

  @@id([selfId, friendId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Marker {
  id          BigInt       @id @default(autoincrement())
  lat         Float
  lng         Float
  zoomLevel   Int
  userId      String?
  message     String?      @db.Text
  makerSource MarkerSource @default(USER)
  markerType  MarkerType   @default(DANGER)
  level       MarkerLevel  @default(MEDIUM)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum MarkerLevel {
  LOW
  MEDIUM
  HIGH
}

enum MarkerType {
  DANGER
  SAFETY
}

enum MarkerSource {
  USER
  NEWS
}

model Position {
  userId    String   @id
  lat       Float
  lng       Float
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String
  message   String   @db.Text
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}
